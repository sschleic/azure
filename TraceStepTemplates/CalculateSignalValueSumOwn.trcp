<?xml version="1.0" encoding="utf-8"?>
<TRACE-STEP-PROTOTYPE format-rev="1" uuid="beba10911cdd11e0acaa0024d7351970" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="trcpEventPythonII">
	<DESCRIPTION xsi:type="unicode">Generates a sample based sum signal for a given input signal. 

Note: The resulting value is the sum of all values of the given signal collected over all samples.</DESCRIPTION>
	<SIGNALS xsi:type="trcpParameterDescriptionList">
		<PARAMETER uuid="e4d354801cdd11e0a0930024d7351970" xsi:type="signalDescription">
			<NAME xsi:type="unicode">Signal</NAME>
			<DESCRIPTION xsi:type="unicode">The signal which should be used for the sum calculation.</DESCRIPTION>
			<EVENT-TYPE xsi:type="string">PHY</EVENT-TYPE>
		</PARAMETER>
		<PARAMETER uuid="f28639211d6511e08ca80024d7351970" xsi:type="signalDescription">
			<NAME xsi:type="unicode">ValueSum</NAME>
			<DESCRIPTION xsi:type="unicode">Calculated sample based value sum signal.</DESCRIPTION>
			<EVENT-TYPE xsi:type="string">PHY</EVENT-TYPE>
			<DIRECTION xsi:type="string">OUT</DIRECTION>
		</PARAMETER>
	</SIGNALS>
	<PARAMETERS xsi:type="trcpParameterDescriptionList"/>
	<INIT-FUNCTION xsi:type="pyFunctionII">
		<NAME xsi:type="unicode">Init</NAME>
		<PARAMETER-NAMES/>
		<CODE xsi:type="pyCode">
			<SOURCE xsi:type="unicode">#Funktionskopf generiert, nicht editieren!
def Init(dataContainer, parameters, report):
    from collections import deque
    # set default values
    dataContainer.sum = 0.0
    dataContainer.sampleCount = 0
    dataContainer.time = deque()
</SOURCE>
		</CODE>
	</INIT-FUNCTION>
	<FINALIZE-FUNCTION xsi:type="pyFunctionII">
		<NAME xsi:type="unicode">Finalize</NAME>
		<PARAMETER-NAMES/>
		<CODE xsi:type="pyCode">
			<SOURCE xsi:type="unicode">#Funktionskopf generiert, nicht editieren!
def Finalize(dataContainer, parameters, report):
    
    # check if signal has been emitted
    if dataContainer.sampleCount &lt;= 0:
        # set result text, result should stay NONE
        report.SetResultText(&quot;Input signal is empty.&quot;)
    
    else:
        # set result text, result should stay NONE
        report.SetResultText(&quot;Successfully emitted signal with %s samples.&quot; % dataContainer.sampleCount)
        
        # emit the current calculated sum
        for time in dataContainer.time:
            dataContainer.EmitSignal(time, &quot;ValueSum&quot;, dataContainer.sum)
</SOURCE>
		</CODE>
	</FINALIZE-FUNCTION>
	<FUNCTIONS>
		<ELEMENT xsi:type="pyEventFunctionII">
			<NAME xsi:type="unicode">Next</NAME>
			<PARAMETER-NAMES/>
			<CODE xsi:type="pyCode">
				<SOURCE xsi:type="unicode">#Funktionskopf generiert, nicht editieren!
def Next(event, hold, dataContainer, parameters, report):

    # counte samples
    dataContainer.sampleCount += 1
    
    # get signal value and time
    value = event.GetValue(&quot;Signal&quot;)
    time = event.GetTime()

    # check signal value type
    if not isinstance(value, (int, float)):
        raise TypeError(&quot;Data type of input signal is not supported: %s. Only numeric (int, float) values are supported.&quot; % type(value))
    else:
        # calculate sum value
        dataContainer.sum += value
        dataContainer.time.append(time)
</SOURCE>
			</CODE>
			<SIGNAL-NAMES>
				<ELEMENT xsi:type="unicode">Signal</ELEMENT>
			</SIGNAL-NAMES>
		</ELEMENT>
	</FUNCTIONS>
</TRACE-STEP-PROTOTYPE>
